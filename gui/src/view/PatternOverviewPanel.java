/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import data.Pattern;
import data.RelativeJump;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Philip Becker-Ehmck
 */
public class PatternOverviewPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatternOverviewPanel
     */
    public PatternOverviewPanel() {
        initComponents();
        
        JLabel label = null;
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(label.RIGHT);
        patternsTable.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        patternsTable = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patterns", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        patternsTable.setAutoCreateRowSorter(true);
        patternsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Occurrences", "Hits", "Misses", "Success Rate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patternsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patternsTable;
    // End of variables declaration//GEN-END:variables

    public void addPattern(Pattern p) {
        Object[] tmp = new Object[5];

        List<RelativeJump> jumps = p.getJumps();
        
        long hits = 0;
        long misses = 0;
        StringBuilder sb = new StringBuilder();
        
        for (RelativeJump jump : jumps) {
            sb.append("(").append(jump.getX_move()).append("|").append(jump.getY_move()).append(") ");
            hits += jump.getHits();
            misses += jump.getMisses();
        }
        
        tmp[0] = p.getPID();
        tmp[1] = p.getNumOccurrences();
        tmp[2] = hits;
        tmp[3] = misses;
        DecimalFormat f = new DecimalFormat("#.00");
        tmp[4] = f.format(((hits) / (double) (hits + misses)) * 100) + " %";
        // add pattern to table
        ((DefaultTableModel) patternsTable.getModel()).addRow(tmp);
        // select the first entry
        patternsTable.setRowSelectionInterval(0, 0);
    }

    public JTable getPatternsTable() {
        return patternsTable;
    }

    public void removePatterns() {
        while (((DefaultTableModel) patternsTable.getModel()).getRowCount() > 0) {
            ((DefaultTableModel) patternsTable.getModel()).removeRow(0);
        }
    }
}
