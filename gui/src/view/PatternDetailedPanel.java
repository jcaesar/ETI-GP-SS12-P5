/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import data.Pattern;
import data.RelativeJump;
import data.Sequence;
import java.awt.GridBagConstraints;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Philip Becker-Ehmck
 */
public class PatternDetailedPanel extends javax.swing.JPanel {

    private final GridBagConstraints constraints;
    private GridBagConstraints c;

    /**
     * Creates new form PatternsStatisticsPanel
     */
    public PatternDetailedPanel() {
        initComponents();
        constraints = new GridBagConstraints();
        constraints.gridx = 2;
        constraints.gridy = 2;
        // constraints.fill = GridBagConstraints.HORIZONTAL;
        // constraints.anchor = GridBagConstraints.NORTHWEST;
        constraints.weightx = 1.0;
        constraints.weighty = 1.0;
        
        // Access column should be aligned to the center
        JLabel label = null;
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(label.CENTER);
        accessesTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(label.RIGHT);
        accessesTable.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel3 = new javax.swing.JLabel();
        sequencesPanel1 = new view.SequencesPanel();
        patternSequence = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        accessesTable = new javax.swing.JTable();

        jLabel3.setText("jLabel3");

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setMinimumSize(new java.awt.Dimension(450, 135));
        setName("");
        setPreferredSize(new java.awt.Dimension(450, 135));
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        add(sequencesPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(patternSequence, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(450, 100));

        accessesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Access", "Hits", "Misses", "Success Rate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(accessesTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accessesTable;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel patternSequence;
    private view.SequencesPanel sequencesPanel1;
    // End of variables declaration//GEN-END:variables

    public void setPattern(Pattern p) {

        List<RelativeJump> jumps = p.getJumps();

        PatternRepresentationPanel rep = new PatternRepresentationPanel(jumps);
        constraints.gridx = 1;
        constraints.gridy = 2;
        constraints.gridheight = 2;
        constraints.weightx = 0.1;
        constraints.weighty = 1;
        constraints.anchor = GridBagConstraints.NORTH;
        // gridBagConstraints.fill = GridBagConstraints.BOTH;
        add(rep, constraints);

        constraints.gridy = 2;

        StringBuilder sb = new StringBuilder(" Pattern: ");
        
        removeAccesses();
        for (RelativeJump jump : jumps) {
            addAccess(jump);
            sb.append("(").append(jump.getX_move()).append("|").append(jump.getY_move()).append(") ");
        }
        patternSequence.setText(sb.toString());
    }

    public void setSequences(List<Sequence> seq) {
        for (Sequence s : seq) {
            sequencesPanel1.addSequence(s);
        }
    }

    private void addAccess(RelativeJump access) {
        Object[] tmp = new Object[4];
        tmp[0] = "(" + access.getX_move() + "|" + access.getY_move() + ")";
        tmp[1] = access.getHits();
        tmp[2] = access.getMisses();
        DecimalFormat f = new DecimalFormat("#.00");
        tmp[3] = f.format(access.getHits() / (double) (access.getHits() + access.getMisses()) * 100) + " %";
        ((DefaultTableModel) accessesTable.getModel()).addRow(tmp);
    }

    private void removeAccesses() {
        while (((DefaultTableModel) accessesTable.getModel()).getRowCount() > 0) {
            ((DefaultTableModel) accessesTable.getModel()).removeRow(0);
        }
    }
}
