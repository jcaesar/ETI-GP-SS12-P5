package view;

import data.RelativeJump;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

/**
 *
 * @author Simon Wimmer
 *
 * Stellt ein einzelnes Kuchendiagramm zu einer Zugriffsart dar.
 */
public class PieChartPanel extends javax.swing.JPanel {

    RelativeJump jump;
    int diameter;
    int text_height = 0;
    int text_width = 0;
    Font font;
    final int TEXT_PAD = 5; //Abstand Text Kuchendiagramm
    final int TEXT_SIZE = 12; //Schriftgröße
    final int TEXT_STYLE = Font.BOLD; //Schriftstil

    public PieChartPanel(RelativeJump jump, int diameter) {
        this.jump = jump;
        this.diameter = diameter;

        //Breite und Höhe des Texts berechnen
        font = new Font("Blub", TEXT_STYLE, TEXT_SIZE);

        FontMetrics fm = this.getFontMetrics(font);
        text_height = fm.getHeight();

        //Berechne die Breite des Anzeigetext: (x/y)
        String s = "(" + jump.getX_move() + "|" + jump.getY_move() + ")";
        text_width = fm.stringWidth(s);

        //Größe sowohl für große als auch kleine Kuchen korrekt setzen
        setPreferredSize(new java.awt.Dimension(Math.max(text_width, diameter),
                diameter + text_height + TEXT_PAD));


    }

    @Override
    public void paint(Graphics graphics) {
        //Kuchendiagramme sind ohne Antialiasing sehr unansehnlich
        Graphics2D g2d = (Graphics2D) graphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
                RenderingHints.VALUE_TEXT_ANTIALIAS_ON);


        drawPie(graphics, 0, 0, diameter, jump.getHits(), jump.getMisses());


        graphics.setFont(font);
        graphics.setColor(Color.black);

        //Beschriftung (<X-Bewegung>/<Y-Bewegung>) ausgeben
        graphics.drawString("(" + jump.getX_move() + "|" + jump.getY_move() + ")",
                this.getWidth() / 2 - text_width / 2, diameter + 10 + TEXT_PAD);
    }

    /**
     *
     * @param graphics Graphikkontext
     * @param x_pos Momentan 0
     * @param y_pos Momentan 0
     * @param diameter Durchmesser des Kuchen
     * @param hits
     * @param misses
     */
    private void drawPie(Graphics graphics, int x_pos, int y_pos, int diameter, int hits, int misses) {

        //Gradzahl entsprechend der Anzahl der Hits berechnen
        int degHits = (int) (((double) hits /(double)(hits + misses)) * 360);

        //Die beiden Segmente zeichnen
        graphics.setColor(Color.green.darker());
        graphics.fillArc(x_pos, y_pos, diameter, diameter, 0, degHits);
        graphics.setColor(Color.red.darker());
        graphics.fillArc(x_pos, y_pos, diameter, diameter, degHits, 360 - degHits);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
