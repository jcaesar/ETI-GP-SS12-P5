package view;

import controller.EtisFileFilter;
import data.DataInput;
import data.RelativeJump;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JToggleButton;

/**
 *
 * @author Philip Becker-Ehmck
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new MainFrame
     */
    public MainFrame() {
        initComponents();

        // Create instances of lists for dynamic GUI
        dataStructureList = new ArrayList<JToggleButton>();
        arrowList = new ArrayList<ArrowStatisticsPanel>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        DataStructuresButtonGroup = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        aboutDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        Toolbar = new javax.swing.JToolBar();
        LabelToolBar = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        relativeJumpPanel = new view.RelativeJumpPanel();
        piePanel = new javax.swing.JPanel();
        matrixPanel = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 5));
        statisticsPanel = new view.StatisticsPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileMenuItem = new javax.swing.JMenuItem();
        seperator = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        docMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        fileChooser.setFileFilter(new EtisFileFilter());

        jLabel1.setText("Product Version: 0.8");
        aboutDialog.getContentPane().add(jLabel1, java.awt.BorderLayout.PAGE_START);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cache Analyzer");
        setMinimumSize(new java.awt.Dimension(1000, 700));
        setPreferredSize(new java.awt.Dimension(1000, 700));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        Toolbar.setFloatable(false);
        Toolbar.setRollover(true);
        Toolbar.setBorderPainted(false);

        LabelToolBar.setText("Data Structures: ");
        Toolbar.add(LabelToolBar);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(Toolbar, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        relativeJumpPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Relative Jumps", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        relativeJumpPanel.setDoubleBuffered(false);
        relativeJumpPanel.setMinimumSize(new java.awt.Dimension(500, 250));
        relativeJumpPanel.setName("");
        relativeJumpPanel.setPreferredSize(new java.awt.Dimension(500, 250));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(relativeJumpPanel, gridBagConstraints);

        piePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pie Chart Representation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        piePanel.setMinimumSize(new java.awt.Dimension(500, 250));
        piePanel.setName("");
        piePanel.setPreferredSize(new java.awt.Dimension(500, 250));
        piePanel.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(piePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        getContentPane().add(jPanel2, gridBagConstraints);

        matrixPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Absolute Matrix Representation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N
        matrixPanel.setMinimumSize(new java.awt.Dimension(450, 450));
        matrixPanel.setPreferredSize(new java.awt.Dimension(450, 450));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 6.0;
        getContentPane().add(matrixPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(filler1, gridBagConstraints);

        statisticsPanel.setMinimumSize(new java.awt.Dimension(450, 70));
        statisticsPanel.setName("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(statisticsPanel, gridBagConstraints);

        fileMenu.setText("File");

        openFileMenuItem.setText("Open File...");
        fileMenu.add(openFileMenuItem);
        fileMenu.add(seperator);

        exitMenuItem.setText("Exit");
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");

        docMenuItem.setText("Documentation");
        helpMenu.add(docMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup DataStructuresButtonGroup;
    private javax.swing.JLabel LabelToolBar;
    private javax.swing.JToolBar Toolbar;
    public javax.swing.JDialog aboutDialog;
    public javax.swing.JMenuItem aboutMenuItem;
    public javax.swing.JMenuItem docMenuItem;
    public javax.swing.JMenuItem exitMenuItem;
    public javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel matrixPanel;
    private javax.swing.JMenuBar menuBar;
    public javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JPanel piePanel;
    private view.RelativeJumpPanel relativeJumpPanel;
    private javax.swing.JPopupMenu.Separator seperator;
    private view.StatisticsPanel statisticsPanel;
    // End of variables declaration//GEN-END:variables
    // Declaration of variables for a dynamic GUI
    private List<JToggleButton> dataStructureList;
    private List<ArrowStatisticsPanel> arrowList;
    private DetailedOverallStatisticsPanel detail;
    // End of variables declaration

    /**
     *
     * Adds a button for the specified matrix in the toolbar.
     *
     * @param matrix
     * @param number number of the matrix in the intern ArrayList
     */
    public void addToggleButton(DataInput matrix, int number) {
        JToggleButton button = new JToggleButton();

        DataStructuresButtonGroup.add(button);
        // initialize Data
        button.setText(String.valueOf(number));
        button.setFocusable(false);
        button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        if (number == 1) {
            button.setSelected(true);
        }
        // add to toolbar
        Toolbar.add(button);
        // add to list (so that I can be removed later)
        dataStructureList.add(button);
    }

    public void removeToggleButton() {
        for (JToggleButton btn : dataStructureList) {
            Toolbar.remove(btn);
            DataStructuresButtonGroup.remove(btn);
        }
        Toolbar.updateUI();
        dataStructureList = new ArrayList<JToggleButton>();
    }

    /**
     *
     * Adds overall statistics for the currently display/specified matrix.
     *
     * @param matrix
     * @param number number of the matrix in the intern ArrayList
     */
    /*
     * public void addDetailedStatistics(int hits, int misses, int number) {
     * detail = new DetailedOverallStatisticsPanel(); // initialize Data
     * detail.setMatrixName("Matrix " + (number+1)); detail.setNumber(hits +
     * misses); detail.setHits(hits); detail.setMisses(misses); DecimalFormat f
     * = new DecimalFormat("#0.00"); detail.setRate(f.format((double) hits /
     * (double) (hits + misses) * 100)); // add to frame
     * statisticsPanel.addStatistics(detail); }
     */
    /**
     *
     * Removes overall statistics for the currently display/specified matrix.
     *
     * @TODO terrible way to do it
     */
    /*
     * public void removeDetailedStatistics() { if (detail != null)
     * statisticsPanel.remove(detail); }
     */
    /**
     *
     * Adds a short combined statistics that includes all the matrices.
     *
     * @param hits overall cache hits in all the matrices
     * @param misses overall cache misses in all the matrices
     */
    /*
     * public void addOverallStatistics(long hits, long misses) {
     * DetailedOverallStatisticsPanel overall = new
     * DetailedOverallStatisticsPanel(); // initialize Data
     * overall.setMatrixName("Overall"); overall.setNumber(hits + misses);
     * overall.setHits(hits); overall.setMisses(misses); DecimalFormat f = new
     * DecimalFormat("#0.00"); overall.setRate(f.format((double) hits / (double)
     * (hits + misses) * 100)); // add to frame
     * statisticsPanel.addStatistics(overall); }
     */
    
    /**
     *
     * @param matrix @TODO just quickly added, needs another class for "clean"
     * implementation
     */
    public void addAbsoluteRepresentation(DataInput matrix) {
        MatrixPanel m = new MatrixPanel(matrix);
        m.setPreferredSize(new java.awt.Dimension(450, 450));
        matrixPanel.add(m);
        matrixPanel.updateUI();
    }

    /**
     *
     */
    public void removeAbsoluteRepresentation() {
        matrixPanel.removeAll();
    }

    /**
     *
     * Adds the relative statistics + arrow for the specified access of the
     * matrix.
     *
     * @param jump
     */
    public void addArrowStatisticsPanel(RelativeJump jump) {
        ArrowStatisticsPanel arrow = new ArrowStatisticsPanel();
        // initialize Data
        arrow.setJumpDirections(jump.getX_move(), jump.getY_move(),
                (double) jump.getHits() / (double) (jump.getHits() + jump.getMisses()) * 100);
        arrow.setNumber(jump.getHits() + jump.getMisses());
        arrow.setHits(jump.getHits());
        arrow.setMisses(jump.getMisses());
        arrow.setSuccessrate((double) jump.getHits()
                / (double) (jump.getHits() + jump.getMisses()) * 100);
        // add to list (so that I can be removed later)
        arrowList.add(arrow);
        relativeJumpPanel.addArrowStatisticsPanel(arrow);
    }

    /**
     *
     * Removes the all the relative jump panels from the GUI.
     */
    public void removeArrowStatistics() {
        relativeJumpPanel.removeArrowStatistics();
        relativeJumpPanel.updateUI();
    }

    /**
     *
     * Adds a pie chart for the specified matrix to the GUI.
     *
     * @param matrix
     */
    public void addPieChart(DataInput matrix) {
        PieContainer pieContainer = new PieContainer(matrix);
        piePanel.add(pieContainer);
        piePanel.updateUI();
    }

    /**
     *
     * Removes the pie chart from the GUI.
     */
    public void removePieChart() {
        piePanel.removeAll();
    }

    public void updateOverallStatistics(long overallHits, long overallMisses) {
        statisticsPanel.setOverallStatistics(overallHits, overallMisses);
    }

    public void updateDetailedStatistics(int hits, int misses, int n) {
        statisticsPanel.setMatrixStatistics(hits, misses, n);
    }

    /**
     *
     * Adds an MatrixListener to all the buttons.
     *
     * @param al
     */
    public void addMatrixListener(ActionListener al) {
        for (JToggleButton button : dataStructureList) {
            button.addActionListener(al);
        }
    }

    /**
     *
     * Adds an FileMenuListener to all the buttons.
     *
     * @param al
     */
    public void addFileMenuListener(ActionListener al) {
        openFileMenuItem.addActionListener(al);
        exitMenuItem.addActionListener(al);
    }

    public void addHelpMenuListener(ActionListener al) {
        docMenuItem.addActionListener(al);
        aboutMenuItem.addActionListener(al);
    }

    public void showAboutDialog() {
        aboutDialog.setSize(400, 400);
        aboutDialog.setDefaultCloseOperation(javax.swing.JFrame.HIDE_ON_CLOSE);
        aboutDialog.setVisible(true);
    }
}
