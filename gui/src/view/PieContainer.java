package view;

import data.DataInput;
import data.RelativeJump;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.List;

/**
 *
 * @author Simon Wimmer
 *
 * Berechnet die korrekten Größen für die Pie Charts. Ordnet sie in einem
 * möglichst quadratischen Gitter mit Hilfe von GridBagLayout an.
 */
public class PieContainer extends javax.swing.JPanel {

    final int MAX_PIE_DIAMETER = 100;
    final int PAD = 10; //Minimum pie distance

    public PieContainer(DataInput data) {
        initComponents(); //Setze Layout auf GridBagLayout


        GridBagLayout layout = (GridBagLayout) getLayout();
        GridBagConstraints c = new GridBagConstraints();

        c.insets = new Insets(PAD, PAD, PAD, PAD);


        List<RelativeJump> jumps = data.getRelativeJumps();

        if (jumps.isEmpty()) {
            return;
        }

        //Größte Anzahl an Zugriffen berechnen
        int maxAccesses = jumps.get(0).getHits() + jumps.get(0).getMisses();
        for (RelativeJump j : jumps) {
            int sum = j.getHits() + j.getMisses();
            if (sum > maxAccesses) {
                maxAccesses = sum;
            }
        }

        //Möglichst quadratische Anordnung generieren
        int h = (int) Math.sqrt(jumps.size());
        int w = (jumps.size() / h) + (jumps.size() % h == 0 ? 0 : 1);

        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {

                //Nicht versuchen mehr Elemente als in jumps anzuordnen
                if (i * w + j >= jumps.size()) {
                    break;
                }

                RelativeJump jump = jumps.get(i * w + j);

                int sum = jump.getHits() + jump.getMisses();

                //Zugriffsart mit größter Zugriffszagl hat maximalen Durchmesser
                //Alle anderen werden entsprechend der Zugriffszahl skaliert
                int diameter = (sum * MAX_PIE_DIAMETER) / maxAccesses;

                //Richtige Position im Gitter setzen
                c.gridx = j;
                c.gridy = i;

                //Kuchendiagramm erstellen
                PieChartPanel pane = new PieChartPanel(jump, diameter);

                this.add(pane, c);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
