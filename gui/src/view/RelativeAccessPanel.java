package view;

import java.awt.GridBagConstraints;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;

/**
 *
 * @author Philip Becker-Ehmck
 */
public class RelativeAccessPanel extends javax.swing.JPanel {

    /**
     * Creates new form RelativeAccessPanel
     */
    public RelativeAccessPanel() {
        initComponents();
        arrowList = new ArrayList<>();
        constraints = new GridBagConstraints();
        constraints.gridx = 1;
        constraints.gridy = 1;
        constraints.fill = GridBagConstraints.BOTH;
        constraints.anchor = GridBagConstraints.NORTHWEST;
        constraints.weightx = 1.0;
        constraints.weighty = 1.0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Relative Jumps", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14))); // NOI18N
        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>                        
    // Variables declaration - do not modify                     
    // End of variables declaration                   
    private List<ArrowStatisticsPanel> arrowList;
    private GridBagConstraints constraints;

    public void addArrowStatisticsPanel(ArrowStatisticsPanel arrow) {
        add(arrow, constraints);
        arrowList.add(arrow);
        if (constraints.gridx < 4) {
            constraints.gridx++;
        } else {
            constraints.gridy++;
            constraints.gridx = 1;
        }
    }

    public void removeArrowStatistics() {
        constraints.gridx = 1;
        constraints.gridy = 1;
        removeAll();
    }

    /**
     * Fills unused space if there are less than 8 relative accesses
     */
    public void fillSpace() {
        if (constraints.gridx < 5 && constraints.gridy < 2) {
            while (5 - constraints.gridx > 0) {
                JPanel filler = new JPanel();
                filler.setMinimumSize(new java.awt.Dimension(80, 120));
                filler.setPreferredSize(new java.awt.Dimension(80, 120));
                add(filler, constraints);
                constraints.gridx++;
            }
            constraints.gridy++;
            constraints.gridx = 1;
        }
        if (constraints.gridx < 5 && constraints.gridy < 3) {
            while (5 - constraints.gridx > 0) {
                JPanel filler = new JPanel();
                filler.setMinimumSize(new java.awt.Dimension(80, 120));
                filler.setPreferredSize(new java.awt.Dimension(80, 120));
                add(filler, constraints);
                constraints.gridx++;
            }
        }
    }
}
