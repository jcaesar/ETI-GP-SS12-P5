/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;

/**
 *
 * @author philip
 */
public class ArrowPanel extends javax.swing.JPanel {

    private int x;
    private int y;
    private Color c;

    /**
     * Creates new form ArrowPanel
     */
    public ArrowPanel(int x, int y, double rate) {
        initComponents();
        // offset in x and y direction
        this.x = x;
        this.y = y;
        setColor(rate);
    }
    private final int ARR_SIZE = 8;

    private void drawArrow(Graphics g1, int x1, int y1, int x2, int y2) {
        Graphics2D g = (Graphics2D) g1.create();

        double dx = x2 - x1, dy = y2 - y1;
        double angle = Math.atan2(dy, dx);
        int len = (int) Math.sqrt(dx * dx + dy * dy);
        AffineTransform at = AffineTransform.getTranslateInstance(x1, y1);
        at.concatenate(AffineTransform.getRotateInstance(angle));
        g.transform(at);

        // set Color according to successrate
        g.setColor(c);
        g.setStroke(new BasicStroke(2));
        // Draw horizontal arrow starting in (0, 0)
        g.drawLine(0, 0, len-4, 0);
        g.fillPolygon(new int[]{len, len - ARR_SIZE, len - ARR_SIZE, len},
                new int[]{0, -ARR_SIZE, ARR_SIZE, 0}, 4);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (x > 0 && y > 0) {
            drawArrow(g, 20, 15, 85, 15);   // left -> right
            drawArrow(g, 20, 15, 20, 60);   // top -> bottom
        } else if (x > 0 && y < 0) {
            drawArrow(g, 20, 55, 85, 55);   // left -> right
            drawArrow(g, 20, 55, 20, 10);   // bottom -> top
        } else if (x < 0 && y > 0) {
            drawArrow(g, 85, 15, 20, 15);   // right -> left
            drawArrow(g, 85, 15, 85, 60);   // top -> bottom
        } else if (x < 0 && y < 0) {
            drawArrow(g, 85, 55, 20, 55);   // right -> left
            drawArrow(g, 85, 55, 85, 10);   // bottom -> top
        } else if (x > 0) {
            drawArrow(g, 20, 35, 85, 35);   // left -> right
        } else if (x < 0) {
            drawArrow(g, 85, 35, 20, 35);   // right -> left
        } else if (y > 0) {
            drawArrow(g, 45, 15, 45, 60);   // top -> bottom
        } else if (y < 0) {
            drawArrow(g, 45, 60, 45, 15);   // bottom -> top
        }
    }

    protected void setColor(double rate) {
        c = new Color((int) (255*(100-rate))/100, (int) (255*rate)/100,0);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMinimumSize(new java.awt.Dimension(100, 70));
        setPreferredSize(new java.awt.Dimension(100, 70));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 70, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
