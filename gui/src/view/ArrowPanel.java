package view;

import java.awt.*;
import java.awt.geom.AffineTransform;

/**
 *
 * @author Philip Becker-Ehmck
 */
public class ArrowPanel extends javax.swing.JPanel {

    private int MAX_X = 45;
    private int MAX_Y = 45;
    private int x_move;
    private int y_move;
    private Color color;
    private final int ARR_SIZE = 7;

    /**
     * 
     * @param x move along the x-axis
     * @param y move along the y-axis
     * @param rate sucess rate to determine the color of the arrow
     */
    public ArrowPanel(int x, int y, double rate) {
        initComponents();
        // offset in x and y direction
        this.x_move = x;
        this.y_move = y;
        setColor(rate);
    }
    
    /**
     * 
     * @param g1
     * @param x1 x-coordinate of the startpoint
     * @param y1 y-coordinate of the startpoint
     * @param x2 x-coordinate of the endpoint
     * @param y2 y-coordinate of the endpoint
     */
    private void drawArrow(Graphics g1, int x1, int y1, int x2, int y2) {
        Graphics2D g = (Graphics2D) g1.create();
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
        
        double dx = x2 - x1, dy = y2 - y1;
        double angle = Math.atan2(dy, dx);
        int len = (int) Math.sqrt(dx * dx + dy * dy);
        AffineTransform at = AffineTransform.getTranslateInstance(x1, y1);
        at.concatenate(AffineTransform.getRotateInstance(angle));
        g.transform(at);

        // set Color according to successrate
        g.setColor(color);
        g.setStroke(new BasicStroke(3));
        // Draw horizontal arrow starting in (0, 0)
        g.drawLine(-7, 0, len - 7, 0);
        g.fillPolygon(new int[]{len, len - ARR_SIZE, len - ARR_SIZE, len},
                new int[]{0, -ARR_SIZE, ARR_SIZE, 0}, 4);
    }

    /**
     * 
     * @param g 
     */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // square root function for length + a minimum lenght of 2
        int length_x = (int) (Math.sqrt(Math.abs(x_move)) + 4);
        int length_y = (int) (Math.sqrt(Math.abs(y_move)) + 4);

        // check maximum length of an arrow 
        if (length_x > MAX_X) {
            length_x = MAX_X;
        }
        if (length_y > MAX_Y) {
            length_y = MAX_Y;
        }

        // minium length does not apply to zero vectors
        if (y_move == 0) {
            length_y = 0;
        }
        if (x_move == 0) {
            length_x = 0;
        }

        // draw the arrow (if necessary)
        if (!(x_move == 0 && y_move == 0)) {
            if (x_move >= 0 && y_move >= 0) {
                drawArrow(g, (int) (45 - (length_x / 2.0)), (int) (35 - (length_y / 2.0)),
                        (int) (45 + (length_x / 2.0)), (int) (35 + (length_y / 2.0)));
            } else if (x_move >= 0 && y_move <= 0) {
                drawArrow(g, (int) (45 - (length_x / 2.0)), (int) (35 + (length_y / 2.0)),
                        (int) (45 + (length_x / 2.0)), (int) (35 - (length_y / 2.0)));
            } else if (x_move <= 0 && y_move >= 0) {
                drawArrow(g, (int) (45 + (length_x / 2.0)), (int) (35 - (length_y / 2.0)),
                        (int) (45 - (length_x / 2.0)), (int) (35 + (length_y / 2.0)));
            } else if (x_move <= 0 && y_move <= 0) {
                drawArrow(g, (int) (45 + (length_x / 2.0)), (int) (35 + (length_y / 2.0)),
                        (int) (45 - (length_x / 2.0)), (int) (35 - (length_y / 2.0)));
            }
        }
    }
    
    /*
     * Determines the color of the arrow according to the success rate
     * 100 % green - 0 % red
     */
    private void setColor(double rate) {
        color = new Color((int) (255 * (100 - rate)) / 100, (int) (255 * rate) / 100, 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMinimumSize(new java.awt.Dimension(100, 70));
        setPreferredSize(new java.awt.Dimension(100, 70));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 70, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
